
on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request:

jobs:

  tests:
    runs-on: ubuntu-22.04
    # We don't fail on dev versions, as those are snapshots
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: true
      matrix:
        # only use one version for the lint step
        postgresql_version: [11, 12, 13, 14, 15]
        experimental: [false]
        repo: ["pgdg"]
        # Define the current dev version to be experimental
        include:
          - postgresql_version: 16
            experimental: true
            repo: "pgdg-snapshot"
    env:
      PGVERSION: ${{ matrix.postgresql_version }}
      DISTRO: ubuntu
    steps:

      - id: checkout
        uses: actions/checkout@v2
        with:
          # Do not persist the token during execution of this job.
          persist-credentials: false

      - id: dependencies
        run: |
          # Must be installed via the system
          sudo apt update
          sudo apt install curl ca-certificates gnupg
          sudo apt install python3-bpfcc python3-pip
          curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-${{ matrix.repo }} main ${{ matrix.postgresql_version }}" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          sudo apt install postgresql-${{matrix.postgresql_version}} postgresql-${{matrix.postgresql_version}}-dbgsym
          sudo pip install setuptools toml

          # Install requirements from pyproject.toml
          python -c 'import toml; open("requirements.txt.tmp", "w").write("\n".join(toml.load(open("pyproject.toml"))["project"]["dependencies"]) + "\n")'
          # Install lint requirements
          python -c 'import toml; open("requirements.txt.tmp", "a").write("\n".join(toml.load(open("pyproject.toml"))["project"]["optional-dependencies"]["lint"]) + "\n")'
          sudo pip install -r requirements.txt.tmp
          python -c "import bcc; print(bcc.__file__)"

      - id: tests
        run: |
          sudo PYTHONPATH=$(pwd)/src pytest --postgresql-exec /usr/lib/postgresql/${{matrix.postgresql_version}}/bin/pg_ctl --cov --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          env_vars: PGVERSION
          fail_ci_if_error: true
          files: ./coverage.xml
          verbose: true
          name: codecov-umbrella

  tests_fedora_container:
    runs-on: ubuntu-22.04
    env:
      PGVERSION: 13
      DISTRO: fedora
    steps:
      - id: checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - id: dependencies
        run: |
          sudo apt install dnf systemd-container
          sudo apt install postgresql-client
          # Also install it in the host, for the tests running outside the
          # container
          sudo pip install setuptools toml
          sudo apt install python3-bpfcc python3-pip telnet
          python -c 'import toml; open("requirements.txt.tmp", "w").write("\n".join(toml.load(open("pyproject.toml"))["project"]["dependencies"]) + "\n")'
          # Install lint requirements
          python -c 'import toml; open("requirements.txt.tmp", "a").write("\n".join(toml.load(open("pyproject.toml"))["project"]["optional-dependencies"]["lint"]) + "\n")'
          sudo pip install -r requirements.txt.tmp
          sudo ./tests/scripts/setup_fedora_container.sh
          sudo apt install curl ca-certificates gnupg

      - id: fedora_tests_outside_container
        run: |
          sudo PYTHONPATH=$(pwd)/src pytest --postgresql-host 172.16.0.1 --container fedora --cov --cov-report=xml

      - id: fedora_tests_inside_container
        run: |
          sudo systemd-run --setenv=PYTHONPATH=/root/pgtracer/src \
            --working-directory=/root/pgtracer  \
            --machine fedora --wait --pipe \
            pytest --postgresql-exec /usr/bin/pg_ctl  --cov --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          env_vars: PGVERSION, DISTRO
          fail_ci_if_error: true
          files: ./coverage.xml /var/lib/machines/fedora/root/ptracer/coverage.xml
          verbose: true
          name: codecov
